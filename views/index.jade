extends layout

block append css
  style(type='text/css').
    .chart {
      margin-bottom: 20px;
    }
    .highcharts-container {
      width: 100%;
    }
    @font-face {
      font-family: 'Unica One';
      font-style: normal;
      font-weight: 400;
      src: local('Unica One'), local('UnicaOne-Regular'), url(https://fonts.gstatic.com/s/unicaone/v4/z3VYemEbD7zsQFQLG6g3SltXRa8TVwTICgirnJhmVJw.woff2) format('woff2'), url(https://fonts.gstatic.com/s/unicaone/v4/z3VYemEbD7zsQFQLG6g3Sj8E0i7KZn-EPnyo3HZu7kw.woff) format('woff');
    }

block append content
    .container
      #dash_hash.chart
      #p2pool_hash.chart
      #dash_diff.chart

block append scripts
  script(type='text/javascript', src='//cdn.socket.io/socket.io-1.0.0.js')
  script(type='text/javascript', src='//code.highcharts.com/highcharts.js')
  script(type='text/javascript', src='//cdnjs.cloudflare.com/ajax/libs/highcharts/4.0.4/themes/dark-unica.js')
  script(type='text/javascript', src='//cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.4/moment.min.js')

  script(type='text/javascript').
    var socket = io.connect();
    Highcharts.setOptions({
      global: {
        useUTC: false
      }
    });
    var dash_hash, p2pool_hash, dash_diff;

    $(document).ready(function(){
      socket.on('initiateChart', function (data) {
        //console.log(data.dataPoints);
        var dataPoints = data.dataPoints;

        dash_hash = loadChart("DASH Network Hashrate", "dash_hash", 1);
        p2pool_hash = loadChart("P2Pool Network Hashrate", "p2pool_hash", 1);
        dash_diff = loadChart("DASH Difficulty", "dash_diff", 2);

        dash_hash.series[0].setData(dataPoints['dash_hashrate']);
        p2pool_hash.series[0].setData(dataPoints['p2pool_hashrate']);
        dash_diff.series[0].setData(dataPoints['dash_diff']);
      });
      socket.on('updateChart', function(data) {
        //console.log(data.newPoint);
        var newPoint = data.newPoint;

        dash_hash.series[0].addPoint(newPoint['dash_hashrate'][0], true, true);
        p2pool_hash.series[0].addPoint(newPoint['p2pool_hashrate'][0], true, true);
        dash_diff.series[0].addPoint(newPoint['dash_diff'][0], true, true);
      });

    });

    function loadChart(title, container, type){
      chart = new Highcharts.Chart({
        chart: {
          renderTo: container,
          zoomType: 'x'
        },
        title: {
          text: title
        },
        subtitle: {
          text: document.ontouchstart === undefined ? 'Click and drag in the plot area to zoom in' : 'Pinch the chart to zoom in'
        },
        xAxis: {
          type: 'datetime',
          labels: {
            formatter: function () {
              return Highcharts.dateFormat('%b %d %H:%M', this.value);
            }
          }
        },
        tooltip: {
          formatter: function() {
            if(type==1){
              return moment(this.x).format('MMM Do YYYY, HH:mm') + '<br/>Hashrate ' + (this.y/1000/1000).toFixed(2) + 'MH/s';
            }else if(type==2){
              return moment(this.x).format('MMM Do YYYY, HH:mm') + '<br/>Difficulty ' + (this.y).toFixed(2);
            }
          }
        },
        yAxis: {
          title: {
            text: null
          },
          labels: {
            formatter: function() {
              if(type==1){
                return this.value/1000/1000/1000 + ' GH/s';
              }else if(type==2){
                return this.value;
              }
            }
          }
        },
        credits: {
          text: 'Crahl.ca',
          href: 'http://www.crahl.ca'
        },
        legend: {
          enabled: false
        },
        plotOptions: {
          series: {
            turboThreshold :0
          },
          area: {
            fillColor: {
              linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1},
              stops: [
                [0, Highcharts.getOptions().colors[0]],
                [1, Highcharts.Color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')]
              ]
            },
            marker: {
              radius: 2
            },
            lineWidth: 1,
            states: {
              hover: {
                lineWidth: 1
              }
            },
            threshold: null
          }
        },
        series: [{
          type: 'area',
          name: 'Hashrate',
          pointStart: (Math.round(new Date().getTime()/1000.0)*1000)-24*60*60*1000,
          pointInterval: 60 * 1000,
          data: []
        }]
      });
      return chart;
    }



